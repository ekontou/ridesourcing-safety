y<-diff(y1)
for (i in 1:(as.numeric(length(y)))-1){
l[i]=(y[i]/mean(y))*log(y[i]/mean(y))
}
l<-na.omit(l)
return(mean(l))
}
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
dat<-read_csv("Data/dat1.csv", col_names = TRUE)
load("~/Box/RCode4CVRP/Rdata0630.RData")
# Overall Gini Index
# I used true values as x for Suits, order (ranking) as x for Gini. So I will only keep order calculation as Gini and Suits. I will do Gini ordered by PEV buyers in CVRP, Suits ordered by median income, and Suits ordered by DAC level score.
gini_index<-function(df){
l<-c()
for (i in 1:(nrow(df)-1)) {
l[i]=1/2*(df$y[i]+df$y[i+1])*(df$x[i+1]-df$x[i])
}
return(1-2*sum(l))
}
theil_index<-function(y1){
l<-c()
y<-diff(y1)
for (i in 1:(as.numeric(length(y)))-1){
l[i]=(y[i]/mean(y))*log(y[i]/mean(y))
}
l<-na.omit(l)
return(mean(l))
}
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
dat<-read_csv("Data/dat1.csv", col_names = TRUE)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
completeFun(dat,c("rebate_capita_average","CES 3.0 Percentile"))%>%ggdensity( x = "rebate_capita_average",
add = "mean", rug = TRUE,
color = "DAC", fill = "DAC",
palette = c("#0073C2FF", "#FC4E07"),xlim=c(0,50),xlab = "Rebate per capita")
completeFun(dat,c("num_tot","CES 3.0 Percentile"))%>%ggdensity( x = "num_tot",
add = "mean", rug = TRUE,
color = "DAC", fill = "DAC",
palette = c("#0073C2FF", "#FC4E07"),xlim=c(0,400),xlab = "PEV numbers")
completeFun(dat,c("rebate_capita_average","CES 3.0 Percentile"))%>%ggdensity( x = "rebate_capita_average",
add = "mean", rug = TRUE,
color = "DAC", fill = "DAC",
palette = c("#0073C2FF", "#FC4E07"),xlim=c(0,50),xlab = "Rebate per capita")
completeFun(dat,c("num_tot","CES 3.0 Percentile"))%>%ggdensity( x = "num_tot",
add = "mean", rug = TRUE,
color = "DAC", fill = "DAC",
palette = c("#0073C2FF", "#FC4E07"),xlim=c(0,400),xlab = "Total PEV rebates")
completeFun(dat,c("CES 3.0 Percentile","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average`,color="total"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_before`,color="before policy"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_after`,color="after policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("CES Percentile (High value means disadvantaged)")+
ylab("Rebate per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
install.packages("Matrix")
library(Matrix)
completeFun(dat,c("CES 3.0 Percentile","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average`,color="total"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_before`,color="before policy"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_after`,color="after policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("CES Percentile (High value means disadvantaged)")+
ylab("Rebate per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
completeFun(dat,c("income_md","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`income_md`,y=`rebate_capita_average`,color="total"))+
geom_smooth(aes(x=`income_md`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`income_md`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("Median income")+
ylab("Rebate per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
completeFun(dat,c("CES 3.0 Percentile","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average`,color="total"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_before`,color="before policy"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_after`,color="after policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("CES Percentile (High value means disadvantaged)")+
ylab("Rebate per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
load("~/Box/RCode4CVRP/Rdata0630.RData")
# Data Cleaning
library(tidyverse)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(grid)
library(zoo)
library(scales)
library(ggpubr)
library(REAT)
# Example from Stoermann (2009):
# regincome <- c(10,10,10,20,50)
# theil(regincome)
# Overall Gini Index
# I used true values as x for Suits, order (ranking) as x for Gini. So I will only keep order calculation as Gini and Suits. I will do Gini ordered by PEV buyers in CVRP, Suits ordered by median income, and Suits ordered by DAC level score.
gini_index<-function(df){
l<-c()
for (i in 1:(nrow(df)-1)) {
l[i]=1/2*(df$y[i]+df$y[i+1])*(df$x[i+1]-df$x[i])
}
return(1-2*sum(l))
}
theil_index<-function(y1){
l<-c()
y<-diff(y1)
for (i in 1:(as.numeric(length(y)))-1){
l[i]=(y[i]/mean(y))*log(y[i]/mean(y))
}
l<-na.omit(l)
return(mean(l))
}
```{r}
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
completeFun(dat,c("rebate_capita_average","CES 3.0 Percentile"))%>%ggdensity( x = "rebate_capita_average",
add = "mean", rug = TRUE,
color = "DAC", fill = "DAC",
palette = c("#0073C2FF", "#FC4E07"),xlim=c(0,50),xlab = "Rebate per capita")
completeFun(dat,c("num_tot","CES 3.0 Percentile"))%>%ggdensity( x = "num_tot",
add = "mean", rug = TRUE,
color = "DAC", fill = "DAC",
palette = c("#0073C2FF", "#FC4E07"),xlim=c(0,400),xlab = "PEV numbers")
completeFun(dat,c("rebate_capita_average","CES 3.0 Percentile"))%>%ggdensity( x = "rebate_capita_average",
add = "mean", rug = TRUE,
color = "DAC", fill = "DAC",
palette = c("#0073C2FF", "#FC4E07"),xlim=c(0,50),xlab = "Rebate per capita")
completeFun(dat,c("num_tot","CES 3.0 Percentile"))%>%ggdensity( x = "num_tot",
add = "mean", rug = TRUE,
color = "DAC", fill = "DAC",
palette = c("#0073C2FF", "#FC4E07"),xlim=c(0,400),xlab = "Total PEV rebates")
completeFun(dat,c("CES 3.0 Percentile","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average`,color="total"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_before`,color="before policy"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_after`,color="after policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("CES Percentile (High value means disadvantaged)")+
ylab("Rebate per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
completeFun(dat,c("income_md","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`income_md`,y=`rebate_capita_average`,color="total"))+
geom_smooth(aes(x=`income_md`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`income_md`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("Median income")+
ylab("Rebate per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
completeFun(dat,c("CES 3.0 Percentile","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average`,color="total"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_before`,color="before policy"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_after`,color="after policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("CES Percentile (High value means disadvantaged)")+
ylab("Rebate per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
completeFun(dat,c("income_md","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`income_md`,y=`rebate_capita_average`,color="total"))+
geom_smooth(aes(x=`income_md`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`income_md`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("Median income")+
ylab("Rebate per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
completeFun(dat,c("CES 3.0 Percentile","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average`,color="total"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_before`,color="before policy"))+
# geom_point(aes(x=`CES 3.0 Score`,y=`rebate_capita_average_after`,color="after policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`CES 3.0 Percentile`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("CES Percentile (High value means disadvantaged)")+
ylab("Total rebate amount per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
completeFun(dat,c("income_md","rebate_capita_average","rebate_capita_average_before","rebate_capita_average_after")) %>%filter(rebate_capita_average < 100)%>%ggplot()+
#  geom_smooth(aes(x=`income_md`,y=`rebate_capita_average`,color="total"))+
geom_smooth(aes(x=`income_md`,y=`rebate_capita_average_before`,color="before policy"))+
geom_smooth(aes(x=`income_md`,y=`rebate_capita_average_after`,color="after policy"))+
xlab("Median income")+
ylab("Total rebate amount per capita")+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
dat4fun <-completeFun(dat,c("CES 3.0 Percentile","rebate_capita_average_before","rebate_capita_average_after")) %>% filter(rebate_capita_average < 100) %>% arrange(1-`CES 3.0 Percentile`) %>% mutate(y.before=cumsum(rebate_capita_average_before)/sum(rebate_capita_average_before),y.after = cumsum(rebate_capita_average_after)/sum(rebate_capita_average_after))%>%
mutate(order = seq(0,1,1/(nrow(.)-1)))
ggplot(dat4fun)+
geom_line(aes(x=order,y=`y.before`,color="before income cap"))+
geom_line(aes(x=order,y=`y.after`,color="after income cap"))+
geom_text(x=0.75, y=.25, label="DAC line",angle = 0,size=4)+
scale_color_discrete() +
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing CES score")+
ylab("Cumulative share of rebate per capita") +
ggtitle("Suits Lorenz Curve - rebate per capita ordered by CES score")+
geom_vline(xintercept = 0.75,linetype="dashed")+
coord_fixed()+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
dat4fun1 <-completeFun(dat,c("income_md","rebate_capita_average_before","rebate_capita_average_after")) %>% arrange(income_md) %>% mutate(y.before=cumsum(rebate_capita_average_before)/sum(rebate_capita_average_before),y.after = cumsum(rebate_capita_average_after)/sum(rebate_capita_average_after))%>%
mutate(order = seq(0,1,1/(nrow(.)-1)))
ggplot(dat4fun1)+
geom_line(aes(x=order,y=`y.before`,color="before income cap"))+
geom_line(aes(x=order,y=`y.after`,color="after income cap"))+
geom_text(x=0.90, y=.25, label="top 10%",angle = 0,size=4)+
scale_color_discrete() +
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing median income")+
ylab("Cumulative share of rebate per capita") +
ggtitle("Suits Lorenz Curve - rebate per capita ordered by median income")+
geom_vline(xintercept = 0.90,linetype="dashed")+
coord_fixed()+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
dat4fun2 <-completeFun(dat,c("CES 3.0 Percentile","rebate_tot_before","rebate_tot_after")) %>% arrange(1-`CES 3.0 Percentile`) %>% mutate(y.before=cumsum(rebate_tot_before)/sum(rebate_tot_before),y.after = cumsum(rebate_tot_after)/sum(rebate_tot_after))%>%
mutate(order = seq(0,1,1/(nrow(.)-1)))
ggplot(dat4fun2)+
geom_line(aes(x=order,y=`y.before`,color="before income cap"))+
geom_line(aes(x=order,y=`y.after`,color="after income cap"))+
geom_text(x=0.75, y=.25, label="DAC line",angle = 0,size=4)+
scale_color_discrete() +
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing CES score")+
ylab("Cumulative share of total rebate") +
ggtitle("Suits Lorenz Curve - total rebate ordered by CES score")+
geom_vline(xintercept = 0.75,linetype="dashed")+
coord_fixed()+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
# dat4fun2$y.after[5135]
# dat4fun2$y.before[5135]
dat4fun3 <-completeFun(dat,c("income_md","rebate_tot_before","rebate_tot_after")) %>% arrange(income_md) %>% mutate(y.before=cumsum(rebate_tot_before)/sum(rebate_tot_before),y.after = cumsum(rebate_tot_after)/sum(rebate_tot_after))%>%
mutate(order = seq(0,1,1/(nrow(.)-1)))
ggplot(dat4fun3)+
geom_line(aes(x=order,y=`y.before`,color="before income cap"))+
geom_line(aes(x=order,y=`y.after`,color="after income cap"))+
geom_text(x=0.90, y=.25, label="top 10%",angle = 0,size=4)+
scale_color_discrete() +
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing median income")+
ylab("Cumulative share of total rebate") +
ggtitle("Suits Lorenz Curve - total rebate ordered by median income")+
geom_vline(xintercept = 0.90,linetype="dashed")+
coord_fixed()+
labs(color = "")+
theme_minimal()+
theme(legend.position="bottom")
# income
# completeFun(dat,c("income_md","rebate_tot"))%>%arrange(income_md)%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot),x=cumsum(income_md)/sum(income_md))%>%
#   ggplot(aes(x=x,y=y))+
#   geom_line(size = 1) +
#   geom_abline(intercept=0,slope=1,linetype="dashed")+
#   xlab("Percantage of Median Income")+
#   ylab("Percantage of Total Rebate") +
#   ggtitle("Suits Lorenz Curve - Total Rebate vs. Median Income, All years by Census Tract")+
#   theme_minimal()
# population
completeFun(dat,c("rebate_tot","num_tot"))%>%arrange(`num_tot`)%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot))%>%   ggplot(aes(x=seq(0,1,1/(nrow(.)-1)),y=y))+
geom_line(size = 1) +
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing PEV buyers")+
ylab("Cumulative share of total rebate") +
ggtitle("Gini - total rebate vs. order of PEV buyers")+
coord_fixed()+
theme_minimal()
# by income
# rank <- completeFun(dat,c("rebate_tot","income_md","num_tot"))%>%arrange(income_md)%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot),y1=cumsum(income_md)/sum(income_md))
#
# rank$y[7186]
completeFun(dat,c("rebate_tot","income_md","num_tot"))%>%arrange(income_md)%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot),y1=cumsum(income_md)/sum(income_md))%>%
ggplot(aes(x=seq(0,1,1/(length(y) -1))))+
geom_line(aes(y=y))+
# geom_line(aes(y=y1))+
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing median income")+
ylab("Cumulative share of total rebate") +
ggtitle("Suits - total rebate vs. order of median income")+
coord_fixed()+
theme_minimal()
# ces3.0
completeFun(dat,c("rebate_tot","num_tot","CES 3.0 Score"))%>%arrange(100-`CES 3.0 Score` )%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot))%>%   mutate(y=cumsum(rebate_tot)/sum(rebate_tot),y1=cumsum(income_md)/sum(income_md))%>%
ggplot(aes(x=seq(0,1,1/(length(y) -1))))+
geom_line(aes(y=y))+
# geom_line(aes(y=y1))+
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing DAC level")+
ylab("Cumulative share of total rebate") +
ggtitle("Suits - total rebate vs. order of DAC level")+
coord_fixed()+
theme_minimal()
# income
# completeFun(dat,c("income_md","rebate_tot"))%>%arrange(income_md)%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot),x=cumsum(income_md)/sum(income_md))%>%
#   ggplot(aes(x=x,y=y))+
#   geom_line(size = 1) +
#   geom_abline(intercept=0,slope=1,linetype="dashed")+
#   xlab("Percantage of Median Income")+
#   ylab("Percantage of Total Rebate") +
#   ggtitle("Suits Lorenz Curve - Total Rebate vs. Median Income, All years by Census Tract")+
#   theme_minimal()
# population
completeFun(dat,c("rebate_tot","num_tot"))%>%arrange(`num_tot`)%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot))%>%   ggplot(aes(x=seq(0,1,1/(nrow(.)-1)),y=y))+
geom_line(size = 1) +
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing PEV buyers")+
ylab("Cumulative share of total rebate") +
ggtitle("Gini - total rebate vs. order of PEV buyers")+
coord_fixed()+
theme_minimal()
# by income
# rank <- completeFun(dat,c("rebate_tot","income_md","num_tot"))%>%arrange(income_md)%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot),y1=cumsum(income_md)/sum(income_md))
#
# rank$y[7186]
completeFun(dat,c("rebate_tot","income_md","num_tot"))%>%arrange(income_md)%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot),y1=cumsum(income_md)/sum(income_md))%>%
ggplot(aes(x=seq(0,1,1/(length(y) -1))))+
geom_line(aes(y=y))+
# geom_line(aes(y=y1))+
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing median income")+
ylab("Cumulative share of total rebate") +
ggtitle("Suits - total rebate vs. order of median income")+
coord_fixed()+
theme_minimal()
# ces3.0
completeFun(dat,c("rebate_tot","num_tot","CES 3.0 Score"))%>%arrange(100-`CES 3.0 Score` )%>% mutate(y=cumsum(rebate_tot)/sum(rebate_tot))%>%   mutate(y=cumsum(rebate_tot)/sum(rebate_tot),y1=cumsum(income_md)/sum(income_md))%>%
ggplot(aes(x=seq(0,1,1/(length(y) -1))))+
geom_line(aes(y=y))+
# geom_line(aes(y=y1))+
geom_abline(intercept=0,slope=1,linetype="dashed")+
xlab("Cumulative share of census tracts ordered by increasing DAC level")+
ylab("Cumulative share of total rebate") +
ggtitle("Suits - total rebate vs. order of DAC level")+
coord_fixed()+
theme_minimal()
adoptionev <- read_csv("Data/adoptionev.csv")
rebate_adoption_rate<-data.frame(`adoption.rate_bev`=adoptionev[1:33,]$adoption_rate, "adoption.rate_phev"=adoptionev[34:66,]$adoption_rate)
pt<-ts(rebate_adoption_rate, frequency = 4, start = c(2011, 1))
a <- data.frame(Time=c(time(pt)),rebate_adoption_rate)
a[1:4,3]<-NA # omit 0
a$Time<-yearqtr(a$Time)
# bev.y1<-mean(a[1:21,2])
# bev.y2<-mean(a[-(1:21),2])
# phev.y1<-mean(a[5:21,3])
# phev.y2<-mean(a[-(1:21),3])
library(hrbrthemes)
install.packages("hrbrthemes")
install.packages("hrbrthemes")
# Data Cleaning
library(tidyverse)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(grid)
library(zoo)
library(scales)
library(ggpubr)
library(REAT)
# Example from Stoermann (2009):
# regincome <- c(10,10,10,20,50)
# theil(regincome)
install.packages("hrbrthemes")
install.packages("hrbrthemes", repos = c("https://cinc.rud.is", "https://cloud.r-project.org/"))
remotes::install_github("hrbrmstr/hrbrthemes")
install.packages("digest")
install.packages("hrbrthemes", repos = c("https://cinc.rud.is", "https://cloud.r-project.org/"))
remotes::install_github("hrbrmstr/hrbrthemes")
install.packages("stringi")
# Data Cleaning
library(tidyverse)
# Data Cleaning
library(tidyverse)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(grid)
library(zoo)
library(scales)
library(ggpubr)
library(REAT)
# Example from Stoermann (2009):
# regincome <- c(10,10,10,20,50)
# theil(regincome)
load("~/Box/RCode4CVRP/Rdata0630.RData")
rebate_adoption_rate<-data.frame(`adoption.rate_bev`=adoptionev[1:33,]$adoption_rate, "adoption.rate_phev"=adoptionev[34:66,]$adoption_rate)
a <- data.frame(Time=c(time(pt)),rebate_adoption_rate)
a[1:4,3]<-NA # omit 0
a$Time<-yearqtr(a$Time)
library(viridis)
adoptionev%>%
ggplot( aes(x=Time, y=adoption_rate, group=Group, color=Group)) +
geom_line() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
xlab("year - quarter")
library(dygraphs)
install.packages("dygraphs")
# Your time column MUST be a time format!, check it out with str()
str(data)
# Then you can create the xts format, and thus use dygraph
don <- xts(x = a[,-1], order.by = a$Time)
plot_list = list()
for (i in 1:9) {
dat2<-na.omit(as.matrix(dat[,c(2*i+2,3*i+21,55,3*i+23)]))
dat.income <-  dat2[order(dat2[,1]),]# income
dat.dac <-  dat2[order(dat2[,3], decreasing = TRUE),]# dac
dat.num <- dat2[order(dat2[,4]),] # num_pev_buyer
# overall
dat.dac
y.income <- cumsum(dat.income[,2])/sum(dat.income[,2])
y.dac <- cumsum(dat.dac[,2])/sum(dat.dac[,2])
y.num <- cumsum(dat.num[,2])/sum(dat.num[,2])
order <- seq(0,1,1/(nrow(dat2)-1))
plot_list[[i]] = as.data.frame(cbind(y.num,y.income,y.dac,order))
}
#adoptionev <- read_csv("Data/adoptionev.csv")
rebate_adoption_rate<-data.frame(`adoption.rate_bev`=adoptionev[1:33,]$adoption_rate, "adoption.rate_phev"=adoptionev[34:66,]$adoption_rate)
pt<-ts(rebate_adoption_rate, frequency = 4, start = c(2011, 1))
a <- data.frame(Time=c(time(pt)),rebate_adoption_rate)
a[1:4,3]<-NA # omit 0
a$Time<-yearqtr(a$Time)
# bev.y1<-mean(a[1:21,2])
# bev.y2<-mean(a[-(1:21),2])
# phev.y1<-mean(a[5:21,3])
# phev.y2<-mean(a[-(1:21),3])
library(hrbrthemes)
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgdal", repos="http://R-Forge.R-project.org", type="source")
library(devtools)
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install.packages("devtools")
setwd("~/Documents/GitHub/ridesourcing-safety")
library(devtools)
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
library(tmap)
auf.poly <-readShapePoly("auf.shp", IDvar="Geoid")
str(slot(auf.poly,"data"))
summary(auf.poly@data)
leaflet(auf.poly) %>%
addPolygons(stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5) %>%
addTiles()
#Libraries
library(readr)
library(ggplot2)
library(lmtest) #langrage multiplier test
library(splm)
library(naniar)
library(gplots)
library(spdep)
library(maptools)
library(sf)
library(splm) #spatial panel data analysis package
library(tmap)
library(leaflet)
library(dplyr)
library(corrplot)
#check the whole Travis County region of the base analysis
auf.poly <-readShapePoly("auf.shp", IDvar="Geoid")
str(slot(auf.poly,"data"))
summary(auf.poly@data)
leaflet(auf.poly) %>%
addPolygons(stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5) %>%
addTiles()
require(RColorBrewer)
#Figure Maps included in Kontou and McDonald Paper comparing rates of crashes and ridesourcing trips before and after the RA introduction
facets = c("Crashes_B", "Crashes_A")
breaks = c(0, 0.5, 1, 2, 5, 10)
tm_shape(auf.poly) + tm_polygons(facets, breaks=breaks, palette = "YlOrBr", free.scales=FALSE) +
tm_facets(nrow = 2, ncol=1, sync = TRUE) +
tm_layout(panel.labels = c("Before: Avg. Crashes/1K people ", "After: Avg.Crashes/1K people"),  legend.position=c("left", "bottom"))
tmap_save(filename = "Fig3_panelA.tiff", dpi = 300)
#Figure Maps Ridesourcing
facets = c("TripsRA_B","TripsRA_A")
breaks=c(0,0.05,0.1,0.3,5)
tm_shape(auf.poly) + tm_polygons(facets, breaks=breaks, palette = "YlOrBr") +
tm_facets(nrow = 2, ncol=1, sync = TRUE) +
tm_layout(panel.labels = c("Before: Avg. RA Trips/Population", "After: Avg. RA Trips/Population" ), legend.position=c("left", "bottom"), legend.stack="horizontal")
tmap_save(filename = "Fig3_panelB.tiff", dpi = 300)
